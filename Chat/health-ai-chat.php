<?php
session_start();
require_once '../includes/config.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: ../login.php');
    exit();
}

// Get user information
$user_id = $_SESSION['user_id'];
$user_name = $_SESSION['full_name'] ?? $_SESSION['username'] ?? 'Ng∆∞·ªùi d√πng';
$user_role = $_SESSION['role_name'] ?? 'patient';

$role_display = [
    'admin' => 'Qu·∫£n tr·ªã vi√™n',
    'patient' => 'B·ªánh nh√¢n', 
    'doctor' => 'B√°c sƒ©'
];
?>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü©∫ AI Health Chat - T∆∞ v·∫•n s·ª©c kh·ªèe th√¥ng minh | MediSync</title>
    
    <!-- Fonts & Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    
    <!-- Custom Styles -->
    <link href="health-ai-chat.css" rel="stylesheet">
</head>

<body>
    <!-- Removed floating shapes for better performance -->

    <div class="chat-wrapper">
        <!-- Header -->
        <div class="chat-header">
            <div class="header-left">
                <button class="back-btn" onclick="goHome()" title="Quay l·∫°i trang ch·ªß">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="chat-info">
                    <h1>AI Health Chat</h1>
                    <p>Tr·ª£ l√Ω s·ª©c kh·ªèe th√¥ng minh</p>
                </div>
            </div>
            
            <div class="header-right">
                <div class="user-info">
                    <div class="user-avatar">
                        <?= strtoupper(substr($user_name, 0, 1)) ?>
                    </div>
                    <div class="user-details">
                        <h4><?= htmlspecialchars($user_name) ?></h4>
                        <p><?= $role_display[$user_role] ?? 'Ng∆∞·ªùi d√πng' ?></p>
                    </div>
                </div>
                
                <div class="header-actions">
                    <button class="action-btn close" onclick="closeChat()" title="ƒê√≥ng tr√≤ chuy·ªán">
                        <i class="fas fa-times"></i>
                    </button>
                    <button class="action-btn refresh" onclick="refreshChat()" title="L√†m m·ªõi tr√≤ chuy·ªán">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                    <button class="action-btn danger" onclick="logout()" title="ƒêƒÉng xu·∫•t">
                        <i class="fas fa-sign-out-alt"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Main Chat -->
        <div class="chat-main">
            <!-- Removed duplicate chat controls - now only in header -->

            <!-- Inner Header -->
            <div class="chat-inner-header">
                <div class="inner-header-content">
                    <h1 class="chat-title">
                        <i class="fas fa-robot"></i>
                        AI Health Assistant
                    </h1>
                    <p class="chat-subtitle">
                        Ch√†o m·ª´ng <?= htmlspecialchars($user_name) ?>! T√¥i s·∫µn s√†ng t∆∞ v·∫•n s·ª©c kh·ªèe cho b·∫°n
                    </p>
                    
                    <div class="status-indicator">
                        <div class="status-dot"></div>
                        AI ƒëang online - S·∫µn s√†ng h·ªó tr·ª£
                    </div>
                </div>
            </div>

            <!-- Messages Area -->
            <div class="messages-area" id="messagesArea">
                <!-- Welcome -->
                <!-- <div class="welcome-card" id="welcomeCard">
                    <div class="welcome-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <h2 class="welcome-title">Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üëã</h2>
                    <p class="welcome-text">
                        T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ y t·∫ø v√† s·ª©c kh·ªèe. H√£y ƒë·∫∑t c√¢u h·ªèi ho·∫∑c ch·ªçn m·ªôt ch·ªß ƒë·ªÅ d∆∞·ªõi ƒë√¢y ƒë·ªÉ b·∫Øt ƒë·∫ßu!
                    </p>
                    
                    <div class="quick-suggestions">
                        <div class="suggestion-btn" onclick="sendMessage('T√¥i b·ªã ƒëau ƒë·∫ßu th∆∞·ªùng xuy√™n, nguy√™n nh√¢n c√≥ th·ªÉ l√† g√¨?')">
                            <span class="suggestion-emoji">ü§ï</span>
                            <div class="suggestion-title">ƒêau ƒë·∫ßu</div>
                            <div class="suggestion-desc">T∆∞ v·∫•n v·ªÅ tri·ªáu ch·ª©ng ƒëau ƒë·∫ßu</div>
                        </div>
                        
                        <div class="suggestion-btn" onclick="sendMessage('L√†m th·∫ø n√†o ƒë·ªÉ chƒÉm s√≥c da m·∫∑t hi·ªáu qu·∫£?')">
                            <span class="suggestion-emoji">‚ú®</span>
                            <div class="suggestion-title">ChƒÉm s√≥c da</div>
                            <div class="suggestion-desc">H∆∞·ªõng d·∫´n chƒÉm s√≥c da ƒë√∫ng c√°ch</div>
                        </div>
                        
                        <div class="suggestion-btn" onclick="sendMessage('Ch·∫ø ƒë·ªô dinh d∆∞·ª°ng n√†o ph√π h·ª£p cho tr·∫ª em?')">
                            <span class="suggestion-emoji">üë∂</span>
                            <div class="suggestion-title">Dinh d∆∞·ª°ng tr·∫ª em</div>
                            <div class="suggestion-desc">T∆∞ v·∫•n dinh d∆∞·ª°ng cho tr·∫ª</div>
                        </div>
                        
                        <div class="suggestion-btn" onclick="sendMessage('C√°ch ph√≤ng ng·ª´a c·∫£m c√∫m hi·ªáu qu·∫£?')">
                            <span class="suggestion-emoji">üõ°Ô∏è</span>
                            <div class="suggestion-title">Ph√≤ng ng·ª´a b·ªánh</div>
                            <div class="suggestion-desc">TƒÉng c∆∞·ªùng mi·ªÖn d·ªãch</div>
                        </div>
                        
                        <div class="suggestion-btn" onclick="sendMessage('L√†m th·∫ø n√†o ƒë·ªÉ chƒÉm s√≥c ng∆∞·ªùi cao tu·ªïi?')">
                            <span class="suggestion-emoji">üë¥</span>
                            <div class="suggestion-title">ChƒÉm s√≥c ng∆∞·ªùi gi√†</div>
                            <div class="suggestion-desc">S·ª©c kh·ªèe ng∆∞·ªùi cao tu·ªïi</div>
                        </div>
                        
                        <div class="suggestion-btn" onclick="sendMessage('T√¥i mu·ªën t·∫≠p th·ªÉ d·ª•c ƒë·ªÉ gi·∫£m c√¢n, b·∫Øt ƒë·∫ßu nh∆∞ th·∫ø n√†o?')">
                            <span class="suggestion-emoji">üí™</span>
                            <div class="suggestion-title">Th·ªÉ d·ª•c & gi·∫£m c√¢n</div>
                            <div class="suggestion-desc">L·ªùi khuy√™n v·ªÅ t·∫≠p luy·ªán</div>
                        </div>
                    </div>
                </div> -->

                <!-- Typing indicator will be dynamically created -->
            </div>

            <!-- Input Area -->
            <div class="input-area">
                <form id="chatForm">
                    <div class="input-container">
                        <textarea 
                            id="messageInput" 
                            class="message-input" 
                            placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe c·ªßa b·∫°n..." 
                            rows="1"
                            required
                        ></textarea>
                        <div class="input-actions">
                            <button type="button" class="attach-btn" title="ƒê√≠nh k√®m file">
                                <i class="fas fa-paperclip"></i>
                            </button>
                            <button type="submit" class="send-btn" id="sendBtn">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        const messagesArea = document.getElementById('messagesArea');
        const welcomeCard = document.getElementById('welcomeCard');
        const chatForm = document.getElementById('chatForm');
        
        // Global typing indicator variable
        let typingIndicator = null;

        // Auto-resize textarea
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });

        // Navigation functions
        function goHome() {
            window.location.href = '../index.php';
        }

        function logout() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?')) {
                window.location.href = '../logout.php';
            }
        }

        function refreshChat() {
            if (confirm('L√†m m·ªõi tr√≤ chuy·ªán? T·∫•t c·∫£ tin nh·∫Øn s·∫Ω b·ªã x√≥a.')) {
                location.reload();
            }
        }

        function closeChat() {
            if (confirm('ƒê√≥ng tr√≤ chuy·ªán v√† quay v·ªÅ trang ch·ªß?')) {
                window.location.href = '../index.php';
            }
        }

        // Chat functions
        function scrollToBottom() {
            messagesArea.scrollTop = messagesArea.scrollHeight;
        }

        function showTyping() {
            console.log('Show typing indicator');
            
            // Remove existing typing indicator if any
            hideTyping();
            
            // Create new typing indicator
            typingIndicator = document.createElement('div');
            typingIndicator.className = 'message bot';
            typingIndicator.id = 'typingIndicator';
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.innerHTML = '<i class="fas fa-robot"></i>';
            
            const typingContent = document.createElement('div');
            typingContent.className = 'typing-dots';
            typingContent.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            
            typingIndicator.appendChild(avatar);
            typingIndicator.appendChild(typingContent);
            
            // Add to messages area
            messagesArea.appendChild(typingIndicator);
            scrollToBottom();
        }

        function hideTyping() {
            console.log('Hide typing indicator');
            if (typingIndicator && typingIndicator.parentNode) {
                typingIndicator.parentNode.removeChild(typingIndicator);
                typingIndicator = null;
            }
        }

        function addMessage(content, isUser = false) {
            if (welcomeCard && isUser) {
                welcomeCard.style.display = 'none';
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.innerHTML = isUser ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>';
            
            const content_div = document.createElement('div');
            content_div.className = 'message-content';
            
            if (isUser) {
                content_div.textContent = content;
            } else {
                content_div.innerHTML = marked.parse(content);
            }
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(content_div);
            
            messagesArea.appendChild(messageDiv);
            scrollToBottom();
        }

        function sendMessage(text) {
            messageInput.value = text;
            chatForm.dispatchEvent(new Event('submit'));
        }

        // Form submission
        chatForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Add user message
            addMessage(message, true);
            
            // Clear input
            messageInput.value = '';
            messageInput.style.height = 'auto';
            
            // Disable send button and show typing
            sendBtn.disabled = true;
            
            // Ensure typing indicator is reset and shown
            hideTyping();
            setTimeout(() => {
                showTyping();
                
                // Simulate AI response with delay
                setTimeout(() => {
                    hideTyping();
                    sendBtn.disabled = false;
                    
                    const responses = [
                    `**ü©∫ Ph√¢n t√≠ch t√¨nh tr·∫°ng:**

C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! D·ª±a tr√™n m√¥ t·∫£ c·ªßa b·∫°n, ƒë√¢y l√† nh·ªØng th√¥ng tin h·ªØu √≠ch:

**üìã ƒê√°nh gi√° ban ƒë·∫ßu:**
- Tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£ kh√° ph·ªï bi·∫øn
- C√≥ th·ªÉ c√≥ nhi·ªÅu nguy√™n nh√¢n kh√°c nhau
- C·∫ßn xem x√©t t·ªïng th·ªÉ v·ªÅ l·ªëi s·ªëng v√† s·ª©c kh·ªèe

**üí° C√°c bi·ªán ph√°p t·ª± chƒÉm s√≥c:**
- ƒê·∫£m b·∫£o ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß (7-8 ti·∫øng/ng√†y)
- U·ªëng ƒë·ªß n∆∞·ªõc (2-2.5L/ng√†y)
- T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng, ƒë·ªÅu ƒë·∫∑n
- Qu·∫£n l√Ω stress hi·ªáu qu·∫£
- Ch·∫ø ƒë·ªô dinh d∆∞·ª°ng c√¢n b·∫±ng

**‚ö†Ô∏è Khi n√†o c·∫ßn g·∫∑p b√°c sƒ©:**
- Tri·ªáu ch·ª©ng k√©o d√†i ho·∫∑c tr·ªü n√™n nghi√™m tr·ªçng
- Xu·∫•t hi·ªán c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng kh√°c
- ·∫¢nh h∆∞·ªüng ƒë·∫øn sinh ho·∫°t h√†ng ng√†y

*L∆∞u √Ω: ƒê√¢y l√† th√¥ng tin tham kh·∫£o. H√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.*`,

                    `**‚ú® H∆∞·ªõng d·∫´n chƒÉm s√≥c s·ª©c kh·ªèe:**

R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! D∆∞·ªõi ƒë√¢y l√† nh·ªØng l·ªùi khuy√™n h·ªØu √≠ch:

**üåü Ch·∫ø ƒë·ªô sinh ho·∫°t khoa h·ªçc:**
- **Gi·∫•c ng·ªß:** 7-8 ti·∫øng m·ªói ƒë√™m, ƒëi ng·ªß ƒë√∫ng gi·ªù
- **Dinh d∆∞·ª°ng:** ƒÇn ƒë·ªß 3 b·ªØa, tƒÉng rau xanh, tr√°i c√¢y
- **Th·ªÉ d·ª•c:** 30 ph√∫t/ng√†y, √≠t nh·∫•t 5 ng√†y/tu·∫ßn
- **Tinh th·∫ßn:** Th∆∞ gi√£n, thi·ªÅn, nghe nh·∫°c

**ü•ó Dinh d∆∞·ª°ng c√¢n b·∫±ng:**
- Protein: Th·ªãt, c√°, tr·ª©ng, ƒë·∫≠u
- Carbohydrate: C∆°m, b√°nh m√¨ nguy√™n c√°m
- Ch·∫•t b√©o t·ªët: D·∫ßu √¥ liu, h·∫°t, c√° bi·ªÉn
- Vitamin & kho√°ng ch·∫•t: Rau c·ªß qu·∫£ ƒëa d·∫°ng

**üìä Theo d√µi s·ª©c kh·ªèe:**
- Ki·ªÉm tra c√¢n n·∫∑ng, huy·∫øt √°p ƒë·ªãnh k·ª≥
- Ghi ch√©p c·∫£m gi√°c h√†ng ng√†y
- Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t 6 th√°ng/l·∫ßn

**üíù L·ªùi khuy√™n cu·ªëi:**
H√£y ki√™n nh·∫´n v√† th·ª±c hi·ªán t·ª´ng b∆∞·ªõc m·ªôt c√°ch b·ªÅn v·ªØng!`,

                    `**üî¨ Ph√¢n t√≠ch chuy√™n s√¢u:**

T√¥i hi·ªÉu m·ªëi quan t√¢m c·ªßa b·∫°n. H√£y c√πng t√¨m hi·ªÉu chi ti·∫øt:

**üéØ K·∫ø ho·∫°ch c·∫£i thi·ªán t·ª´ng b∆∞·ªõc:**

**Tu·∫ßn 1-2: Thi·∫øt l·∫≠p n·ªÅn t·∫£ng**
- ƒêi·ªÅu ch·ªânh gi·ªù gi·∫•c sinh ho·∫°t
- TƒÉng l∆∞·ª£ng n∆∞·ªõc u·ªëng h√†ng ng√†y
- B·∫Øt ƒë·∫ßu t·∫≠p th·ªÉ d·ª•c nh·∫π

**Tu·∫ßn 3-4: Ph√°t tri·ªÉn th√≥i quen**
- ·ªîn ƒë·ªãnh ch·∫ø ƒë·ªô ƒÉn u·ªëng
- TƒÉng c∆∞·ªùng ho·∫°t ƒë·ªông th·ªÉ ch·∫•t
- Th·ª±c h√†nh k·ªπ thu·∫≠t th∆∞ gi√£n

**Tu·∫ßn 5-8: Duy tr√¨ v√† n√¢ng cao**
- ƒê√°nh gi√° ti·∫øn ƒë·ªô c·∫£i thi·ªán
- ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch ph√π h·ª£p
- X√¢y d·ª±ng th√≥i quen l√¢u d√†i

**üìà D·∫•u hi·ªáu t√≠ch c·ª±c:**
- Ng·ªß ngon h∆°n, t·ªânh t√°o bu·ªïi s√°ng
- Tinh th·∫ßn ph·∫•n ch·∫•n, √≠t stress
- Th·ªÉ l·ª±c ƒë∆∞·ª£c c·∫£i thi·ªán
- S·ª©c ƒë·ªÅ kh√°ng tƒÉng c∆∞·ªùng

**üö® C·∫ßn l∆∞u √Ω:**
N·∫øu kh√¥ng th·∫•y c·∫£i thi·ªán sau 2-3 tu·∫ßn, h√£y tham kh·∫£o √Ω ki·∫øn chuy√™n gia y t·∫ø.`,

                    `**üè• T∆∞ v·∫•n y t·∫ø chuy√™n nghi·ªáp:**

Xin ch√†o! T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n m·ªôt c√°ch t·ªët nh·∫•t c√≥ th·ªÉ:

**üîç Ph∆∞∆°ng ph√°p ƒë√°nh gi√°:**
- Xem x√©t tri·ªáu ch·ª©ng m·ªôt c√°ch to√†n di·ªán
- Ph√¢n t√≠ch c√°c y·∫øu t·ªë nguy c∆°
- ƒê∆∞a ra khuy·∫øn ngh·ªã ph√π h·ª£p

**üìù Th√¥ng tin c·∫ßn thi·∫øt:**
- M√¥ t·∫£ chi ti·∫øt tri·ªáu ch·ª©ng
- Th·ªùi gian xu·∫•t hi·ªán
- C√°c y·∫øu t·ªë li√™n quan
- Ti·ªÅn s·ª≠ b·ªánh l√Ω (n·∫øu c√≥)

**üíä L∆∞u √Ω quan tr·ªçng:**
- Kh√¥ng t·ª± √Ω d√πng thu·ªëc khi ch∆∞a c√≥ ch·ªâ ƒë·ªãnh
- Theo d√µi s√°t tri·ªáu ch·ª©ng
- Ghi ch√©p nh·∫≠t k√Ω s·ª©c kh·ªèe

**üìû Khi n√†o c·∫ßn h·ªó tr·ª£ y t·∫ø:**
- Tri·ªáu ch·ª©ng n·∫∑ng ho·∫∑c k√©o d√†i
- C√≥ d·∫•u hi·ªáu b√°o ƒë·ªông
- C·∫ßn t∆∞ v·∫•n chuy√™n s√¢u

H√£y chia s·∫ª th√™m ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n!`
                ];
                
                                    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                    addMessage(randomResponse, false);
                    
                    messageInput.focus();
                }, Math.random() * 2000 + 1000);
            }, 100);
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey && document.activeElement === messageInput) {
                e.preventDefault();
                chatForm.dispatchEvent(new Event('submit'));
            }
        });

        // Prevent accidental page refresh
        let hasMessages = false;
        
        // Track when user starts chatting
        function setHasMessages() {
            hasMessages = true;
        }
        
        // Override the original addMessage to track messages
        const originalAddMessage = addMessage;
        addMessage = function(content, isUser = false) {
            originalAddMessage(content, isUser);
            if (isUser || (!welcomeCard || welcomeCard.style.display === 'none')) {
                setHasMessages();
            }
        };
        
        // Prevent refresh/F5 when there are messages
        window.addEventListener('beforeunload', function(e) {
            if (hasMessages) {
                const message = 'B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi kh·ªèi trang? T·∫•t c·∫£ tin nh·∫Øn s·∫Ω b·ªã m·∫•t!';
                e.preventDefault();
                e.returnValue = message;
                return message;
            }
        });
        
        // Prevent F5 key specifically
        document.addEventListener('keydown', function(e) {
            // F5 key
            if (e.key === 'F5' || (e.ctrlKey && e.key === 'r')) {
                if (hasMessages) {
                    e.preventDefault();
                    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën l√†m m·ªõi trang? T·∫•t c·∫£ tin nh·∫Øn chat s·∫Ω b·ªã m·∫•t!')) {
                        hasMessages = false; // Allow refresh
                        location.reload();
                    }
                }
            }
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            messageInput.focus();
            scrollToBottom();
        });
    </script>
</body>
</html> 