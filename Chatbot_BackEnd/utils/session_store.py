# session_store.py - RAM-only session store (t·∫°m th·ªùi d√πng khi ch∆∞a c√≥ Redis)

import asyncio
import logging
from collections import defaultdict
import hashlib
logger = logging.getLogger(__name__)

# ---------------------------
# C·∫§U H√åNH SESSION T·∫†M TR√äN RAM
# ---------------------------

def resolve_session_key(user_id: str = None, session_id: str = None) -> str:
    """
    Tr·∫£ v·ªÅ key d√πng trong session_dict v√† SYMPTOM_SESSION.
    ∆Øu ti√™n user_id n·∫øu c√≥, fallback session_id.
    """
    return str(user_id) if user_id else str(session_id)

# Session l∆∞u theo session_id (gi·∫£ l·∫≠p Redis)
session_dict = {}

# D√πng ƒë·ªÉ l∆∞u tri·ªáu ch·ª©ng ƒë·∫ßy ƒë·ªß (dict) theo session/user
SYMPTOM_SESSION = defaultdict(list)

# C√°c kh√≥a d√πng trong session_dict
SYMPTOM_KEY = "symptoms"         # D·∫°ng list[str] -> ch·ªâ l∆∞u ID ho·∫∑c t√™n tri·ªáu ch·ª©ng
FOLLOWUP_KEY = "followup_asked"  # D·∫°ng list[int] -> l∆∞u ID ƒë√£ h·ªèi follow-up

# ---------------------------
# C√ÅC H√ÄM L√ÄM VI·ªÜC V·ªöI session_dict (session_id)
# ---------------------------

async def get_session_data(user_id: str = None, session_id: str = None) -> dict:
    """Truy xu·∫•t d·ªØ li·ªáu session t·ª´ RAM."""
    key = resolve_session_key(user_id, session_id)
    return session_dict.get(key, {})


def save_session_data(user_id: str = None, session_id: str = None, data: dict = {}):
    """L∆∞u d·ªØ li·ªáu session v√†o RAM."""
    key = resolve_session_key(user_id, session_id)
    session_dict[key] = data

# ----- Tri·ªáu ch·ª©ng (ID d·∫°ng chu·ªói) -----

async def get_symptoms_from_session(user_id: str = None, session_id: str = None) -> list[dict]:
    key = resolve_session_key(user_id, session_id)
    return SYMPTOM_SESSION.get(key, [])

async def update_symptoms_in_session(session_id: str, new_symptoms: list[str]) -> list[str]:
    """
    C·∫≠p nh·∫≠t th√™m tri·ªáu ch·ª©ng m·ªõi v√†o session (d·∫°ng list[str]), lo·∫°i b·ªè tr√πng l·∫∑p.
    Tr·∫£ v·ªÅ danh s√°ch tri·ªáu ch·ª©ng sau c·∫≠p nh·∫≠t.
    """
    session = await get_session_data(session_id)
    current = session.get(SYMPTOM_KEY, [])
    for s in new_symptoms:
        if s not in current:
            current.append(s)
    session[SYMPTOM_KEY] = current
    save_session_data(session_id, session)
    return current

async def clear_symptoms_in_session(session_id: str):
    """X√≥a to√†n b·ªô tri·ªáu ch·ª©ng kh·ªèi session."""
    session = await get_session_data(session_id)
    session[SYMPTOM_KEY] = []
    save_session_data(session_id, session)

# ----- Follow-up tri·ªáu ch·ª©ng (ID d·∫°ng int) -----
async def get_followed_up_symptom_ids(user_id: str = None, session_id: str = None) -> list[int]:
    key = resolve_session_key(user_id, session_id)
    session = await get_session_data(key)
    return session.get(FOLLOWUP_KEY, [])

def hash_question(text: str) -> str:
    return hashlib.sha256(text.strip().encode()).hexdigest()

async def get_followed_up_question_hashes(session_id: str) -> list[str]:
    session = await get_session_data(session_id)
    return session.get(FOLLOWUP_KEY, [])

async def mark_followup_asked(user_id: str = None, session_id: str = None, symptom_ids: list[int] = []):
    key = resolve_session_key(user_id, session_id)
    if not key:
        return

    session = await get_session_data(key)
    already = set(session.get(FOLLOWUP_KEY, []))
    already.update(symptom_ids)
    session[FOLLOWUP_KEY] = list(already)
    save_session_data(key, session)
    logger.info(f"‚úÖ [SessionStore] Ghi followup_asked v√†o key: {key}")

async def clear_followup_asked_all_keys(user_id: str = None, session_id: str = None):
    key = resolve_session_key(user_id, session_id)
    if not key:
        return

    session = await get_session_data(key)
    session[FOLLOWUP_KEY] = []
    save_session_data(key, session)
    logger.info(f"üßπ [SessionStore] ƒê√£ xo√° followup_asked cho key: {key}")


# ---------------------------
# C√ÅC H√ÄM L√ÄM VI·ªÜC V·ªöI SYMPTOM_SESSION (tri·ªáu ch·ª©ng d·∫°ng dict)
# ---------------------------

def save_symptoms_to_session(user_id: str = None, session_id: str = None, new_symptoms: list[dict] = []) -> list[dict]:
    key = resolve_session_key(user_id, session_id)
    current_symptoms = SYMPTOM_SESSION.get(key, [])
    current_ids = {s['id'] for s in current_symptoms}

    for symptom in new_symptoms:
        if symptom['id'] not in current_ids:
            current_symptoms.append(symptom)
            current_ids.add(symptom['id'])

    SYMPTOM_SESSION[key] = current_symptoms
    return current_symptoms

async def get_symptoms_from_session(user_id: str = None, session_id: str = None) -> list[dict]:
    key = resolve_session_key(user_id, session_id)
    return SYMPTOM_SESSION.get(key, [])

async def clear_symptoms_all_keys(user_id: str = None, session_id: str = None):
    key = resolve_session_key(user_id, session_id)
    if not key:
        return

    SYMPTOM_SESSION.pop(key, None)

    session = await get_session_data(key)
    session[SYMPTOM_KEY] = []
    session[FOLLOWUP_KEY] = []
    save_session_data(key, session)
    logger.info(f"üßπ [SessionStore] ƒê√£ xo√° SYMPTOM + followup cho key: {key}")
