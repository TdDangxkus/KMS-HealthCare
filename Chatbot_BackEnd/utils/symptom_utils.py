import pymysql
import logging
logger = logging.getLogger(__name__)
import json
from datetime import date,datetime
from rapidfuzz import fuzz, process
import re
from utils.openai_client import chat_completion
from utils.session_store import get_symptoms_from_session
from config.config import DB_CONFIG
from utils.text_utils import normalize_text

SYMPTOM_LIST = []  # Cache tri·ªáu ch·ª©ng to√†n c·ª•c

# Nh·∫≠n di·ªán c√¢u tr·∫£ l·ªùi m∆° h·ªì v·ªõi ng√¥n ng·ªØ kh√¥ng chu·∫©n (l√≥ng, sai ch√≠nh t·∫£...)
def is_vague_response(text: str) -> bool:
    vague_phrases = [
        "khong biet", "khong ro", "toi khong ro", "hinh nhu", "chac vay",
        "toi nghi la", "co the", "cung duoc", "hoi hoi", "chac la", "hem biet", "k biet", "k ro"
    ]
    text_norm = normalize_text(text)

    for phrase in vague_phrases:
        if phrase in text_norm or fuzz.partial_ratio(phrase, text_norm) > 85:
            return True
    return False

# Load danh s√°ch symptoms t·ª´ db l√™n g·ªìm id v√† name
def load_symptom_list():
    """
    Load danh s√°ch tri·ªáu ch·ª©ng t·ª´ DB, bao g·ªìm ID, t√™n g·ªëc, alias v√† c√°c tr∆∞·ªùng ƒë√£ chu·∫©n h√≥a ƒë·ªÉ tra nhanh.
    L∆∞u v√†o bi·∫øn to√†n c·ª•c SYMPTOM_LIST.
    """
    global SYMPTOM_LIST
    try:
        conn = pymysql.connect(**DB_CONFIG)
        with conn.cursor() as cursor:
            cursor.execute("SELECT symptom_id, name, alias FROM symptoms")
            results = cursor.fetchall()

            SYMPTOM_LIST = []
            for row in results:
                symptom_id, name, alias_raw = row
                norm_name = normalize_text(name)

                aliases = [norm_name]
                if alias_raw:
                    aliases += [normalize_text(a.strip()) for a in alias_raw.split(',') if a.strip()]

                SYMPTOM_LIST.append({
                    "id": symptom_id,
                    "name": name,
                    "aliases": alias_raw,
                    "norm_name": norm_name,
                    "norm_aliases": aliases
                })

            print(f"‚úÖ SYMPTOM_LIST n·∫°p {len(SYMPTOM_LIST)} tri·ªáu ch·ª©ng.")
    
    except Exception as e:
        print(f"‚ùå L·ªói khi load SYMPTOM_LIST t·ª´ DB: {e}")
    
    finally:
        if conn:
            conn.close()

# L·∫•y v√† load danh s√°ch ƒë√£ ƒë∆∞·ª£c l·∫•y 1 l·∫ßn duy nh·∫•t m√† ko c·∫ßn g·ªçi l·∫°i qu√° nhi·ªÅu ho·∫∑c g·ªçi khi kh√¥ng c·∫ßn thi·∫øt
def get_symptom_list():
    global SYMPTOM_LIST
    if not SYMPTOM_LIST:
        print("üîÅ Loading SYMPTOM_LIST for the first time...")
        load_symptom_list()
    return SYMPTOM_LIST

# Refresh symptom list neu c√≥ symptom m·ªõi ƒë∆∞·ª£c th√™m v√†o
def refresh_symptom_list():
    global SYMPTOM_LIST
    SYMPTOM_LIST = []
    load_symptom_list()

def extract_symptoms_gpt(user_message, recent_messages, stored_symptoms_name=None, debug=False):
    symptom_lines = []
    name_to_symptom = {}

    for s in SYMPTOM_LIST:
        aliases = s["aliases"]
        if isinstance(aliases, str):
            aliases = [a.strip() for a in aliases.split(",")]

        line = f"- {s['name']}: {', '.join(aliases)}"
        symptom_lines.append(line)

        # Map t√™n ch√≠nh th·ª©c
        name_to_symptom[normalize_text(s["name"])] = s

        # Map c·∫£ alias lu√¥n
        for alias in aliases:
            name_to_symptom[normalize_text(alias)] = s


    prompt = f"""
        You are a smart and careful medical assistant.

        Below is a list of known health symptoms, each with informal ways users might describe them (Vietnamese aliases):

        {chr(10).join(symptom_lines)}

        Now read the conversation below. Your task:

        - Identify which symptom **names** the user is directly describing or clearly implying.
        - Be careful:
            - Only extract a symptom if it is clearly mentioned or strongly suggested as something the user is **personally experiencing**.
            - Do **NOT** guess based on vague expressions like `"lan"`, `"k√©o d√†i"`, `"r√¢m ran"`, `"l·∫°"` ‚Äî these are too ambiguous.
            - Only extract if the user clearly says keywords like `"ƒëau"`, `"nh·ª©c"`, `"m·ªèi"`, `"t√™"` or other **specific symptom terms**.

                For example:
                - `"T√™ tay lan l√™n c√°nh tay"` ‚Üí ‚úÖ `["T√™ tay ch√¢n"]`
                - ‚õî **NOT** `"T√™ tay lan l√™n c√°nh tay"` ‚Üí `["T√™ tay ch√¢n", "ƒêau c∆°"]`

        - Do NOT infer based on cause/effect (e.g. "tim ƒë·∫≠p nhanh khi h√≠t th·ªü m·∫°nh" ‚â† "kh√≥ th·ªü").
        - If you are unsure (e.g., message is vague), return an empty list [].

        Examples of valid symptom extraction:
        - "T√¥i th·∫•y h∆°i ch√≥ng m·∫∑t v√† ƒëau ƒë·∫ßu" ‚Üí ["Ch√≥ng m·∫∑t", "ƒêau ƒë·∫ßu"]
        - "M√¨nh c·∫£m th·∫•y kh√¥ng kh·ªèe m·∫•y" ‚Üí []
    """.strip()

    if stored_symptoms_name:
        prompt += f"""

        ‚ö†Ô∏è VERY IMPORTANT:
        - The user has already reported these symptoms earlier: {stored_symptoms_name}
        - You must NOT include them again in your extraction.
        - Only return new, additional symptoms if clearly mentioned.

        For example:
        - If "M·ªát m·ªèi" was already stored and the user just said "v·∫´n m·ªát nh∆∞ h√¥m qua" ‚Üí return []
        - If the user now says "ƒëau b·ª•ng n·ªØa" ‚Üí return ["ƒêau b·ª•ng"]
        """

    prompt += f"""

    ---

    Conversation so far:
    {user_message}

    Now return a list of **symptom names** (from the list above) that the user is clearly experiencing.

    Only return names. Example: ["M·ªát m·ªèi", "ƒêau ƒë·∫ßu"]
    """
    
    try:
        reply = chat_completion(
            [{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=150
        )
        content = reply.choices[0].message.content.strip()

        # Cleanup if GPT wraps in ```json
        if content.startswith("```json"):
            content = content.replace("```json", "").replace("```", "").strip()
        if not content.startswith("[") or "[" not in content:
            return [], "Xin l·ªói, m√¨nh ch∆∞a r√µ b·∫°n ƒëang c·∫£m th·∫•y g√¨."

        names = json.loads(content)
        if not isinstance(names, list):
            raise ValueError("GPT returned non-list symptom names.")

        matched = []
        seen_ids = set()
        for name in names:
            norm = normalize_text(name)
            symptom = name_to_symptom.get(norm)
            if symptom and symptom["id"] not in seen_ids:
                matched.append({"id": symptom["id"], "name": symptom["name"]})
                seen_ids.add(symptom["id"])

        return matched, None if matched else ("B·∫°n c√≥ th·ªÉ m√¥ t·∫£ r√µ h∆°n b·∫°n c·∫£m th·∫•y g√¨ kh√¥ng?")

    except Exception as e:
        if debug:
            print("‚ùå GPT symptom extraction failed:", str(e))
        return [], "Xin l·ªói, m√¨nh ch∆∞a r√µ b·∫°n ƒëang c·∫£m th·∫•y g√¨. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ c·ª• th·ªÉ h∆°n kh√¥ng?"

# l∆∞u tri·ªáu ch·ª©ng v√†o database l∆∞u v√†o user_symptom_history khi ƒëang th·ª±c hi·ªán ch·∫©n ƒëo√°n k·∫øt qu·∫£
def save_symptoms_to_db(user_id: int, symptoms: list[dict], note: str = "") -> list[int]:
    conn = pymysql.connect(**DB_CONFIG)
    saved_symptom_ids = []

    try:
        with conn.cursor() as cursor:
            for symptom in symptoms:
                symptom_id = symptom.get("id")
                if not symptom_id:
                    continue  # B·ªè qua n·∫øu thi·∫øu ID

                cursor.execute("""
                    INSERT INTO user_symptom_history (user_id, symptom_id, record_date, notes)
                    VALUES (%s, %s, %s, %s)
                """, (user_id, symptom_id, date.today(), note))
                
                saved_symptom_ids.append(symptom_id)

        conn.commit()
    finally:
        conn.close()

    return saved_symptom_ids

# T·∫°o c√¢u h·ªèi ti·∫øp theo nh·∫π nh√†ng, th√¢n thi·ªán, g·ª£i √Ω ng∆∞·ªùi d√πng chia s·∫ª th√™m th√¥ng tin d·ª±a tr√™n c√°c tri·ªáu ch·ª©ng ƒë√£ ghi nh·∫≠n.
def join_symptom_names_vietnamese(names: list[str]) -> str:
    if not names:
        return ""
    if len(names) == 1:
        return names[0]
    if len(names) == 2:
        return f"{names[0]} v√† {names[1]}"
    return f"{', '.join(names[:-1])} v√† {names[-1]}"

# D·ª±a v√†o c√°c symptom_id hi·ªán c√≥ truy b·∫£ng disease_symptoms ‚Üí l·∫•y danh s√°ch c√°c disease_id c√≥ li√™n quan truy ng∆∞·ª£c l·∫°i ‚Üí l·∫•y th√™m c√°c symptom kh√°c thu·ªôc c√πng b·ªánh (tr·ª´ c√°i ƒë√£ c√≥)
def get_related_symptoms_by_disease(symptom_ids: list[int]) -> list[dict]:
    if not symptom_ids:
        return []

    conn = pymysql.connect(**DB_CONFIG)
    related_symptoms = []

    try:
        with conn.cursor() as cursor:
            # B1: L·∫•y c√°c disease_id li√™n quan t·ªõi c√°c symptom hi·ªán t·∫°i
            format_strings = ','.join(['%s'] * len(symptom_ids))
            cursor.execute(f"""
                SELECT DISTINCT disease_id
                FROM disease_symptoms
                WHERE symptom_id IN ({format_strings})
            """, tuple(symptom_ids))
            disease_ids = [row[0] for row in cursor.fetchall()]

            if not disease_ids:
                return []

            # B2: L·∫•y c√°c symptom_id kh√°c c√πng thu·ªôc c√°c disease ƒë√≥
            format_diseases = ','.join(['%s'] * len(disease_ids))
            cursor.execute(f"""
                SELECT DISTINCT s.symptom_id, s.name
                FROM disease_symptoms ds
                JOIN symptoms s ON ds.symptom_id = s.symptom_id
                WHERE ds.disease_id IN ({format_diseases})
                  AND ds.symptom_id NOT IN ({format_strings})
            """, tuple(disease_ids + symptom_ids))

            related_symptoms = [{"id": row[0], "name": row[1]} for row in cursor.fetchall()]

    finally:
        conn.close()

    return related_symptoms

# T·ª± ƒë·ªông nh·∫≠n bi·∫øt n·∫øu message ch·ª©a tri·ªáu ch·ª©ng hay kh√¥ng
def gpt_detect_symptom_intent(text: str) -> bool:
    prompt = (
        "Please determine whether the following sentence is a description of health symptoms.\n"
        "Answer with YES or NO only.\n\n"
        f"Sentence: \"{text}\"\n"
        "Answer: "
    )
    response = chat_completion(
        [{"role": "user", "content": prompt}],
        max_tokens=5,
        temperature=0
    )
    result = response.choices[0].message.content.strip().lower()
    return result.startswith("yes")

# T·∫°o 1 c√¢u h·ªèi th√¢n thi·ªán v·ªÅ tri·ªáu ch·ª©ng ƒë√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c
async def generate_friendly_followup_question(symptoms: list[dict], session_key: str = None) -> str:

    symptom_ids = [s['id'] for s in symptoms]
    all_symptoms = symptoms

    if session_key:
        session_symptoms = await get_symptoms_from_session(session_key)
        if session_symptoms:
            all_symptoms = session_symptoms

    all_symptom_names = [s['name'] for s in all_symptoms]
    symptom_text = join_symptom_names_vietnamese(all_symptom_names)

    # Truy v·∫•n follow-up t·ª´ DB
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            format_strings = ','.join(['%s'] * len(symptom_ids))
            cursor.execute(f"""
                SELECT name, followup_question
                FROM symptoms
                WHERE symptom_id IN ({format_strings})
            """, symptom_ids)

            results = cursor.fetchall()
    finally:
        conn.close()

    if results:
        names = []
        questions = []
        for name, question in results:
            if question:
                names.append(name)
                questions.append(question.strip())

        gpt_prompt = f"""
            You are a warm and understanding doctor. The patient has shared the following symptoms: {', '.join(names)}.

            Here are the follow-up questions you'd normally ask:
            {chr(10).join([f"- {n}: {q}" for n, q in zip(names, questions)])}

            Now write a single, fluent, caring conversation in Vietnamese to follow up with the patient.

            Instructions:
            - Combine all follow-up questions into one natural Vietnamese message.
            - Connect questions smoothly. If symptoms are related, group them in one paragraph.
            - Vary transitions. You may use phrases like "B√™n c·∫°nh ƒë√≥", "M·ªôt ƒëi·ªÅu n·ªØa", or "Th√™m v√†o ƒë√≥", but each only once.
            - Do not ask about any additional or related symptoms in this message.
            - Avoid repeating sentence structure. Keep it soft, natural, and human.
            - No greetings or thank yous ‚Äî continue mid-conversation.

            Your response must be in Vietnamese.
            """
        try:
            response = chat_completion([
                {"role": "user", "content": gpt_prompt}
            ], temperature=0.4, max_tokens=200)

            return response.choices[0].message.content.strip()
        except Exception as e:
            # fallback n·∫øu GPT l·ªói
            return "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ c√°c tri·ªáu ch·ª©ng ƒë·ªÉ m√¨nh h·ªó tr·ª£ t·ªët h∆°n nh√©?"

    # N·∫øu kh√¥ng c√≥ c√¢u h·ªèi follow-up t·ª´ DB ‚Üí fallback
    symptom_prompt = join_symptom_names_vietnamese([s['name'] for s in symptoms])
    fallback_prompt = (
        f"You are a helpful medical assistant. The user reported the following symptoms: {symptom_prompt}. "
        "Write a natural, open-ended follow-up question in Vietnamese to ask about timing, severity, or other related details. "
        "Avoid technical language. No greetings ‚Äî just ask naturally."
    )

    response = chat_completion([
        {"role": "user", "content": fallback_prompt}
    ])
    fallback_text = response.choices[0].message.content.strip()
    return fallback_text

# H·ªèi tri·ªáu ch·ª©ng ti·∫øp theo khi ƒë√£ h·ªèi xong nh∆∞ng v·∫´n ƒë·ªÅ t·ª´ tri·ªáu ch·ª©ng tr∆∞·ªõc ƒë√≥
async def generate_related_symptom_question(related_names: list[str]) -> str:

    related_names_str = ', '.join(related_names)

    prompt = f"""
        You're a warm and understanding health assistant. The user has already shared one or more symptom(s).

        Now, based on possibly related symptoms like: {related_names_str}, ask if they‚Äôve experienced any of those too ‚Äî without making it sound like a checklist.

        Write your response in Vietnamese.

        Tone guide:
        - The message should sound like a gentle, mid-conversation follow-up.
        - Do NOT start with ‚Äúnh·ªØng tri·ªáu ch·ª©ng b·∫°n ƒë√£ chia s·∫ª‚Äù ‚Äî instead, adapt naturally:
        - If there was only one symptom before, refer to it as ‚Äútri·ªáu ch·ª©ng ƒë√≥‚Äù or skip it.
        - If there were multiple, you may say ‚Äúb√™n c·∫°nh nh·ªØng g√¨ b·∫°n ƒë√£ chia s·∫ª‚Äù.
        - Do NOT say "t√¥i" ‚Äî use ‚Äúm√¨nh‚Äù when referring to yourself.
        - No greetings or thank-you phrases.
        - Avoid overly formal, medical, or robotic language.
        - No emoji or slang.
        - Group related symptoms subtly if possible (e.g., m·ªát m·ªèi, ƒëau ƒë·∫ßu, ch√≥ng m·∫∑t).
        - Write as **one fluid, caring message**.
    """


    response = chat_completion([{"role": "user", "content": prompt}])
    return response.choices[0].message.content.strip()

def load_followup_keywords():
    """
    Tr·∫£ v·ªÅ dict: {normalized symptom name ‚Üí follow-up question}
    """
    conn = pymysql.connect(**DB_CONFIG)
    keyword_map = {}

    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT name, followup_question
                FROM symptoms
                WHERE followup_question IS NOT NULL
            """)
            results = cursor.fetchall()
            for name, question in results:
                norm_name = normalize_text(name)
                keyword_map[norm_name] = question
    finally:
        conn.close()

    return keyword_map

def should_attempt_symptom_extraction(message: str, session_data: dict, stored_symptoms: list) -> bool:
    from utils.openai_client import chat_completion

    prompt = f"""
    You are a smart assistant helping identify whether a sentence from a user in a medical chat should trigger symptom extraction.

    Your task is simple:
    If the sentence contains, suggests, or continues a description of physical or emotional health symptoms ‚Äî even vaguely ‚Äî respond with YES.
    Otherwise, respond with NO. Do not add anything else.

    Examples:
    - "T√¥i b·ªã nh·ª©c ƒë·∫ßu t·ª´ s√°ng" ‚Üí YES
    - "M√¨nh th·∫•y kh√¥ng kh·ªèe l·∫Øm" ‚Üí YES
    - "·ª™ ƒë√∫ng r·ªìi" ‚Üí NO
    - "C·∫£m ∆°n b·∫°n" ‚Üí NO
    - "Ch·∫Øc l√† kh√¥ng sao ƒë√¢u" ‚Üí MAYBE ‚Üí YES

    Sentence: "{message.strip()}"
    Answer:
    """

    try:
        reply = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0, max_tokens=5)

        content = reply.choices[0].message.content.strip().lower()
        return content.startswith("yes")
    except Exception as e:
        print("‚ùå should_attempt_symptom_extraction error:", e)
        return False


def has_diagnosis_today(user_id: int) -> bool:
    today_str = datetime.now().date().isoformat()
    query = """
        SELECT COUNT(*) as total FROM health_predictions
        WHERE user_id = %s AND DATE(prediction_date) = %s
    """
    
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            cursor.execute(query, (user_id, today_str))
            result = cursor.fetchone()
            return result[0] > 0
    finally:
        conn.close()

# H√†m t·∫°o ghi ch√∫ cho tri·ªáu ch·ª©ng khi th√™m v√†o database
def generate_symptom_note(recent_messages: list[str]) -> str:
    if not recent_messages:
        return "Ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ m·ªôt s·ªë tri·ªáu ch·ª©ng trong cu·ªôc tr√≤ chuy·ªán."

    context = "\n".join(f"- {msg}" for msg in recent_messages[-5:])

    prompt = f"""
        You are a helpful AI assistant supporting medical documentation.

        Below is a recent conversation with a user about their health concerns:

        {context}

        Write a short **symptom note** in **Vietnamese**, summarizing the user's main symptom(s) and any relevant context (e.g., when it started, what triggered it, how it felt).

        Instructions:
        - Your note must be in Vietnamese.
        - Keep it short (1‚Äì2 sentences).
        - Use natural, friendly, easy-to-understand language.
        - Do not use medical jargon.
        - Do not invent symptoms that were not clearly mentioned.
        - If the user was vague, still reflect that (e.g., ‚Äúng∆∞·ªùi d√πng kh√¥ng r√µ nguy√™n nh√¢n‚Äù).

        Your output must be only the note. Do not include any explanation or format it as JSON.
    """.strip()

    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.3, max_tokens=100)

        return response.choices[0].message.content.strip()
    except Exception:
        return "Ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ m·ªôt s·ªë tri·ªáu ch·ª©ng trong cu·ªôc tr√≤ chuy·ªán."

def update_symptom_note(user_id: int, symptom_name: str, user_message: str) -> bool:
    today = datetime.now().date().isoformat()

    # 1. Get symptom_id
    symptom_id = None
    query_symptom = "SELECT symptom_id FROM symptoms WHERE name = %s LIMIT 1"
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            cursor.execute(query_symptom, (symptom_name,))
            result = cursor.fetchone()
            if result:
                symptom_id = result["id"]
    finally:
        conn.close()

    if not symptom_id:
        return False

    # 2. Get existing note
    old_note = ""
    query_note = """
        SELECT notes FROM user_symptom_history
        WHERE user_id = %s AND symptom_id = %s AND record_date = %s
        LIMIT 1
    """
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            cursor.execute(query_note, (user_id, symptom_id, today))
            result = cursor.fetchone()
            if result:
                old_note = result["notes"]
    finally:
        conn.close()

    # 3. Build GPT prompt
    prompt = f"""
        You are an intelligent medical assistant helping to manage a patient's symptom history.

        ü©∫ Symptom being tracked: **{symptom_name}**

        Here is the previous note (if any):
        ---
        {old_note or "No prior note available."}

        Here is the latest message from the user:
        ---
        {user_message}

        Your task:
        - Combine the previous note (if available) with the new user update
        - Rewrite the updated symptom note in a clear, concise way as if documenting in a medical chart
        - Be factual, consistent, and natural

        ‚ö†Ô∏è Output the note **in Vietnamese only**, no English explanation or formatting.
            """.strip()

    # 4. Generate note via GPT
    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.3, max_tokens=100)
        new_note = response.choices[0].message.content.strip()
    except Exception:
        new_note = "Ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ m·ªôt s·ªë tri·ªáu ch·ª©ng trong cu·ªôc tr√≤ chuy·ªán."

    # 5. Upsert to DB
    query_check = """
        SELECT id FROM user_symptom_history
        WHERE user_id = %s AND symptom_id = %s AND record_date = %s
        LIMIT 1
    """
    query_insert = """
        INSERT INTO user_symptom_history (user_id, symptom_id, record_date, notes)
        VALUES (%s, %s, %s, %s)
    """
    query_update = """
        UPDATE user_symptom_history
        SET notes = %s
        WHERE user_id = %s AND symptom_id = %s AND record_date = %s
    """

    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            cursor.execute(query_check, (user_id, symptom_id, today))
            exists = cursor.fetchone()
            if exists:
                cursor.execute(query_update, (new_note, user_id, symptom_id, today))
            else:
                cursor.execute(query_insert, (user_id, symptom_id, today, new_note))
            conn.commit()
            return True
    finally:
        conn.close()

