import json
import pymysql
from datetime import date
import logging
import re
import asyncio
logger = logging.getLogger(__name__)
from config.config import DB_CONFIG
from utils.openai_utils import stream_gpt_tokens
from utils.openai_client import chat_completion
from utils.symptom_utils import get_symptom_list, extract_symptoms_gpt, generate_related_symptom_question, save_symptoms_to_db, get_related_symptoms_by_disease, generate_symptom_note, update_symptom_note
from prompts.prompts import build_diagnosis_controller_prompt, build_KMS_prompt
from utils.text_utils import normalize_text
from utils.session_store import save_session_data, get_session_data, get_followed_up_symptom_ids, mark_followup_asked, save_symptoms_to_session, get_symptoms_from_session, clear_followup_asked_all_keys, clear_symptoms_all_keys

def extract_json(content: str) -> str:
    """
    Tr√≠ch JSON t·ª´ ƒëo·∫°n text c√≥ th·ªÉ ch·ª©a r√°c GPT.
    """
    match = re.search(r"\{[\s\S]*\}", content)
    return match.group(0).strip() if match else ""

# H√†m m·ªõi d√πng prompt t·ªïng
async def health_talk(
    user_message: str,
    stored_symptoms: list[dict],
    recent_messages: list[str],
    recent_user_messages: list[str], 
    recent_assistant_messages: list[str],
    session_id=None,
    user_id=None,
    chat_id=None,
    session_context: dict = None
):
    session_data = await get_session_data(user_id=user_id, session_id=session_id)
    followup_after_conclusion_used = session_data.get("followup_after_conclusion_used", False)

    # Step 1: Tr√≠ch tri·ªáu ch·ª©ng m·ªõi
    new_symptoms, fallback_message = extract_symptoms_gpt(
        user_message,
        recent_messages=recent_messages
    )
    logger.info("üåø Tri·ªáu ch·ª©ng tr√≠ch ƒë∆∞·ª£c: %s", new_symptoms)

    if new_symptoms:
        stored_symptoms += [
            s for s in new_symptoms if s["name"] not in {sym["name"] for sym in stored_symptoms}
        ]
        save_symptoms_to_session(user_id, session_id, stored_symptoms)
        stored_symptoms = await get_symptoms_from_session(user_id, session_id)

    # Step 2: L·∫•y related symptom + c√¢u h·ªèi followup
    inputs = await decide_KMS_prompt_inputs(session_id=session_id, user_id=user_id)

    # ‚úÖ In log tri·ªáu ch·ª©ng ƒë√£ h·ªèi follow-up
    asked = await get_followed_up_symptom_ids(session_id=session_id, user_id=user_id)
    logger.info("üìå ƒê√£ h·ªèi follow-up c√°c tri·ªáu ch·ª©ng c√≥ ID: %s", asked)

    # logger.info("üìå related_asked = %s", session_data.get("related_asked", False))
    session_data = await get_session_data(user_id=user_id, session_id=session_id)

    had_conclusion = (
        session_data.get("had_conclusion", False)
        and not followup_after_conclusion_used
    )
    # Step 3: X√¢y prompt t·ªïng h·ª£p
    prompt = build_KMS_prompt(
        SYMPTOM_LIST=get_symptom_list(),
        user_message=user_message,
        stored_symptoms_name=[s["name"] for s in stored_symptoms],
        symptoms_to_ask=inputs["symptoms_to_ask"],
        recent_messages=recent_messages,
        recent_user_messages=recent_user_messages,
        recent_assistant_messages=recent_assistant_messages,
        related_symptom_names=inputs["related_symptom_names"],
        related_asked=session_data.get("related_asked", False),
        session_context=session_context,
        had_conclusion=had_conclusion
    )


    # Step 4: G·ªçi GPT (non-stream)
    completion = chat_completion(messages=[{"role": "user", "content": prompt}], temperature=0.7)

    content = completion.choices[0].message.content.strip()
    logger.debug("üîé Raw content t·ª´ GPT:\n%s", content)

    raw_json = extract_json(content)

    try:
        parsed = json.loads(raw_json)
        logger.debug("üßæ JSON t·ª´ GPT:\n%s", json.dumps(parsed, indent=2, ensure_ascii=False))
    except json.JSONDecodeError as e:
        logger.warning("‚ö†Ô∏è GPT tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON h·ª£p l·ªá: %s", str(e))
        parsed = {}

    message = parsed.get("message", fallback_message or "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ l·∫Øm...")

    # Step 5: ƒêi·ªÅu ph·ªëi logic t·ª´ parsed JSON
    message = parsed.get("message", fallback_message or "B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ t√¨nh tr·∫°ng c·ªßa m√¨nh kh√¥ng?")

    action = parsed.get("action")

    # if action == "related":
    #     session_data["related_asked"] = True
    #     save_session_data(session_id, session_data)

    # ƒê·∫∑t c·ªù khi ƒë√£ qua k·∫øt lu·∫≠n 1 l·∫ßn ƒë·ªÉ ki·ªÉm so√°t followup
    if action in ["light_summary", "diagnosis"]:
        session_data["had_conclusion"] = True
        save_session_data(user_id=user_id, session_id=session_id, data=session_data)

    if parsed.get("action") == "followup" and had_conclusion:
        logger.info("üîÅ ƒê√£ cho ph√©p follow-up sau k·∫øt lu·∫≠n. T·∫Øt c·ªù had_conclusion.")
        session_data["had_conclusion"] = False
        session_data["followup_after_conclusion_used"] = True  # ‚úÖ ƒê√°nh d·∫•u ƒë√£ d√πng r·ªìi
        save_session_data(user_id=user_id, session_id=session_id, data=session_data)


    # üîÑ N·∫øu ng∆∞·ªùi d√πng n√≥i th√™m v·ªÅ tri·ªáu ch·ª©ng c≈© ‚Üí ghi ch√∫ l·∫°i v√†o user_symptom_history
    updated_symptom = parsed.get("updated_symptom")
    diagnosed_today = session_context.get("diagnosed_today", False) if session_context else False
    logger.info(f"‚öôÔ∏è diagnosed_today = {diagnosed_today}")

    # Update note tri·ªáu ch·ª©ng v√†o db n·∫øu ng∆∞·ªùi d√πng c√≥ b·ªè sung th√™m
    if updated_symptom and diagnosed_today:
        try:
            success = update_symptom_note(
                user_id=user_id,
                symptom_name=updated_symptom,
                user_message=user_message
            )
            if success:
                logger.info(f"üìù ƒê√£ c·∫≠p nh·∫≠t ghi ch√∫ tri·ªáu ch·ª©ng: {updated_symptom}")
            else:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ghi ch√∫ tri·ªáu ch·ª©ng: {updated_symptom}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ghi ch√∫ tri·ªáu ch·ª©ng {updated_symptom}: {e}")



    target_followup_id = inputs.get("target_followup_id")
    # ƒê·∫∑t c∆° cho nh·ªØng tri·ªáu ch·ª©ng t∆∞∆°ng ·ª©ng khi followup ƒë√£ h·ªèi
    if action == "followup" and target_followup_id:
        logger.info("‚úÖ ƒê√°nh d·∫•u ƒë√£ h·ªèi follow-up tri·ªáu ch·ª©ng ID: %s", target_followup_id)
        await mark_followup_asked(session_id, user_id, [target_followup_id])

    end = parsed.get("end", False)

    # Log c√°c bi·∫øn ph·ª• tr·ª£
    logger.info("üéØ Action: %s", action)
    logger.debug("üìå Related: %s", "not null" if inputs.get("related_symptom_names") else "null")
    logger.debug("üìù Raw follow-up: %s", "not null" if inputs.get("raw_followup_question") else "null")

    if action == "diagnosis":
        
        # T·∫°o ghi ch√∫ ng·∫Øn cho tri·ªáu ch·ª©ng
        note = generate_symptom_note(recent_messages)

        # L∆∞u tri·ªáu ch·ª©ng v√†o user_symptom_history
        save_symptoms_to_db(user_id=user_id, symptoms=stored_symptoms, note=note)

        logger.info("üìù ƒê√£ l∆∞u ch·∫©n ƒëo√°n v√† tri·ªáu ch·ª©ng v√†o DB")

        # ‚úÖ L·∫•y danh s√°ch b·ªánh t·ª´ GPT
        diseases = parsed.get("diseases", [])
        if diseases:
            save_prediction_to_db(
                user_id=user_id,
                symptoms=stored_symptoms,
                diseases=diseases,
                chat_id=chat_id
            )

    # Step 6: N·∫øu c·∫ßn, clear session
    if end:
        logger.info("üõë GPT y√™u c·∫ßu k·∫øt th√∫c session.")
        # await clear_symptoms_all_keys(user_id=user_id, session_id=session_id)
        # await clear_followup_asked_all_keys(user_id=user_id, session_id=session_id)

    # Step 7: Stream message t·ª´ng ƒëo·∫°n ra ngo√†i
    for chunk in stream_gpt_tokens(message):
        yield chunk 
        await asyncio.sleep(0.05)

# Tr·∫£ v·ªÅ c√°c d·ªØ li·ªáu c·∫ßn thi·∫øt ƒë·ªÉ truy·ªÅn v√†o build_KMS_prompt:
# - stored_symptoms
# - raw_followup_question: danh s√°ch tri·ªáu ch·ª©ng k√®m c√¢u h·ªèi follow-up
# - related_symptom_names: t√™n c√°c tri·ªáu ch·ª©ng li√™n quan n·∫øu kh√¥ng c√≤n follow-up
async def decide_KMS_prompt_inputs(session_id: str, user_id: int):
    stored_symptoms = await get_symptoms_from_session(user_id, session_id)
    next_symptom = await get_next_symptom_to_followup(session_id, user_id, stored_symptoms)

    symptoms_to_ask = [next_symptom["name"]] if next_symptom else []

    logger.info("üì≠ symptoms_to_ask: %s", symptoms_to_ask)

    related_symptom_names = []

    symptom_ids = [s['id'] for s in stored_symptoms]
    related = get_related_symptoms_by_disease(symptom_ids)
    stored_names = [s["name"] for s in stored_symptoms]
    related_names = [s["name"] for s in related if s["name"] not in stored_names]
    related_symptom_names = list(set(related_names))[:10]

    return {
        "symptoms_to_ask": symptoms_to_ask,
        "raw_followup_question": None,  # kh√¥ng d√πng n·ªØa
        "related_symptom_names": related_symptom_names or None,
        "target_followup_id": next_symptom["id"] if next_symptom else None
    }

# Ch·ªçn ƒë√∫ng 1 tri·ªáu ch·ª©ng ch∆∞a h·ªèi follow-up, sau ƒë√≥ truy·ªÅn v√†o GPT ƒë·ªÉ n√≥ t·ª± h·ªèi theo ki·ªÉu tinh t·∫ø t·ª´ng b∆∞·ªõc
async def get_next_symptom_to_followup(session_id: str, user_id: int, stored_symptoms: list[dict]) -> dict | None:
    """
    Tr·∫£ v·ªÅ dict d·∫°ng: {"name": "T√™n tri·ªáu ch·ª©ng ch∆∞a h·ªèi follow-up"}
    ho·∫∑c None n·∫øu kh√¥ng c√≤n tri·ªáu ch·ª©ng n√†o c·∫ßn h·ªèi.
    """
    if not stored_symptoms:
        return None

    # L·∫•y danh s√°ch ID ƒë√£ h·ªèi follow-up t·ª´ session
    already_asked_ids = set(await get_followed_up_symptom_ids(user_id=user_id, session_id=session_id))
    
    # T√¨m tri·ªáu ch·ª©ng ch∆∞a h·ªèi follow-up
    for s in stored_symptoms:
        if s["id"] not in already_asked_ids:
            return {"name": s["name"], "id": s["id"]}

    return None

# L·∫•y nh·ªØng c√¢u h·ªèi li√™n quan t·ªõi tri·ªáu ch·ª©ng t·ª´ DB
async def get_followup_question_fromDB(symptom_ids: list[int], user_id: int, session_id: str = None) -> dict | None:
    if not symptom_ids:
        return None
    # L·∫•y danh s√°ch symptom_id ƒë√£ h·ªèi t·ª´ session
    already_asked = set()
    if session_id:
        already_asked = set(await get_followed_up_symptom_ids(user_id=user_id, session_id=session_id))

    # L·ªçc ra nh·ªØng symptom_id ch∆∞a h·ªèi
    ids_to_ask = [sid for sid in symptom_ids if sid not in already_asked]
    if not ids_to_ask:
        return None

    # Truy v·∫•n DB ƒë·ªÉ l·∫•y c√¢u h·ªèi follow-up
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            format_strings = ','.join(['%s'] * len(ids_to_ask))
            cursor.execute(f"""
                SELECT symptom_id, name, followup_question
                FROM symptoms
                WHERE symptom_id IN ({format_strings}) AND followup_question IS NOT NULL
            """, ids_to_ask)
            results = cursor.fetchall()
    finally:
        conn.close()

    # Tr·∫£ v·ªÅ duy nh·∫•t 1 c√¢u h·ªèi (ch∆∞a ƒë√°nh d·∫•u l√† ƒë√£ h·ªèi)
    for symptom_id, name, question in results:
        if not question:
            continue
        logger.info(f"üîé Follow-up ch∆∞a h·ªèi ‚Üí ch·ªçn h·ªèi th√™m v·ªÅ: {name} (ID: {symptom_id})")
        return {
            "id": symptom_id,
            "name": name,
            "followup_question": question.strip()
        }

    return None

# D·ª±a v√†o c√°c symptom_id hi·ªán c√≥ truy b·∫£ng disease_symptoms ‚Üí l·∫•y danh s√°ch c√°c disease_id c√≥ li√™n quan truy ng∆∞·ª£c l·∫°i ‚Üí l·∫•y th√™m c√°c symptom kh√°c thu·ªôc c√πng b·ªánh (tr·ª´ c√°i ƒë√£ c√≥)
def get_related_symptoms_by_disease(symptom_ids: list[int]) -> list[dict]:
    if not symptom_ids:
        return []

    conn = pymysql.connect(**DB_CONFIG)
    related_symptoms = []

    try:
        with conn.cursor() as cursor:
            # B1: L·∫•y c√°c disease_id li√™n quan t·ªõi c√°c symptom hi·ªán t·∫°i
            format_strings = ','.join(['%s'] * len(symptom_ids))
            cursor.execute(f"""
                SELECT DISTINCT disease_id
                FROM disease_symptoms
                WHERE symptom_id IN ({format_strings})
            """, tuple(symptom_ids))
            disease_ids = [row[0] for row in cursor.fetchall()]

            if not disease_ids:
                return []

            # B2: L·∫•y c√°c symptom_id kh√°c c√πng thu·ªôc c√°c disease ƒë√≥
            format_diseases = ','.join(['%s'] * len(disease_ids))
            cursor.execute(f"""
                SELECT DISTINCT s.symptom_id, s.name
                FROM disease_symptoms ds
                JOIN symptoms s ON ds.symptom_id = s.symptom_id
                WHERE ds.disease_id IN ({format_diseases})
                  AND ds.symptom_id NOT IN ({format_strings})
            """, tuple(disease_ids + symptom_ids))

            related_symptoms = [{"id": row[0], "name": row[1]} for row in cursor.fetchall()]

    finally:
        conn.close()

    return related_symptoms

# l∆∞u ph·ªèng ƒëo√°n b·ªánh v√†o database l∆∞u v√†o health_records user_symptom_history khi ƒëang th·ª±c hi·ªán ch·∫©n ƒëo√°n k·∫øt qu·∫£
def save_prediction_to_db(
    user_id: int,
    symptoms: list[dict],
    diseases: list[dict],
    chat_id: int = None
):
    """
    L∆∞u k·∫øt qu·∫£ ch·∫©n ƒëo√°n g·ªìm nhi·ªÅu b·ªánh do GPT d·ª± ƒëo√°n:
    - Ghi v√†o health_records, health_predictions, prediction_diseases
    """
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            note = "Tri·ªáu ch·ª©ng ghi nh·∫≠n: " + ", ".join([s['name'] for s in symptoms])
            record_date = date.today()

            # Ghi health_records
            cursor.execute("""
                INSERT INTO health_records (user_id, record_date, notes)
                VALUES (%s, %s, %s)
            """, (user_id, record_date, note))
            record_id = cursor.lastrowid

            # Ghi health_predictions
            confidence_score = max([d.get("confidence", 0.0) for d in diseases], default=0.0)
            prediction_details = {
                "symptoms": [s["name"] for s in symptoms],
                "predicted_diseases": [d.get("name") for d in diseases if d.get("name")]
            }

            cursor.execute("""
                INSERT INTO health_predictions (user_id, record_id, chat_id, confidence_score, details)
                VALUES (%s, %s, %s, %s, %s)
            """, (user_id, record_id, chat_id, confidence_score, json.dumps(prediction_details, ensure_ascii=False)))
            prediction_id = cursor.lastrowid

            # Ghi t·ª´ng d√≤ng prediction_diseases
            for d in diseases:
                name = d.get("name")
                confidence = d.get("confidence", 0.0)
                summary = d.get("summary", "")
                care = d.get("care", "")

                # T√¨m trong b·∫£ng diseases
                cursor.execute("SELECT disease_id FROM diseases WHERE name = %s", (name,))
                row = cursor.fetchone()

                if row:
                    disease_id = row[0]
                    disease_name_raw = None
                else:
                    disease_id = -1
                    disease_name_raw = name

                cursor.execute("""
                    INSERT INTO prediction_diseases (
                        prediction_id, disease_id, confidence, disease_name_raw,
                        disease_summary, disease_care
                    ) VALUES (%s, %s, %s, %s, %s, %s)
                """, (prediction_id, disease_id, confidence, disease_name_raw, summary, care
                ))

        conn.commit()
    finally:
        conn.close()





#-------------- d∆∞·ªõi ƒë√¢y l√† nh·ª´ng h√†m ƒë∆∞·ª£c s·ª≠ dung cho vi·ªác chia theo controller kh√¥ng t√¥t kh√¥ng lien m·∫°ch bot g·∫ßn nh∆∞ ko quy·∫øt ƒë·ªãnh ch√≠nh x√°c vi·ªác c·∫ßn th·ª±c hi·ªán --------------------------------------------------

# D·ª± ƒëo√°n b·ªánh d·ª±a tr√™n list tri·ªáu ch·ª©ng
# Tr·∫£ v·ªÅ danh s√°ch c√°c b·ªánh v·ªõi ƒë·ªô ph√π h·ª£p (confidence 0-1) danh s√°ch b·ªánh g·ªìm: id, t√™n, ƒë·ªô ph√π h·ª£p, m√¥ t·∫£, h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã.
def predict_disease_based_on_symptoms(symptoms: list[dict]) -> list[dict]:
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            symptom_ids = [s['id'] for s in symptoms]
            if not symptom_ids:
                return []

            format_strings = ','.join(['%s'] * len(symptom_ids))

            # B1: L·∫•y danh s√°ch b·ªánh c√≥ tri·ªáu ch·ª©ng kh·ªõp
            cursor.execute(f"""
                SELECT 
                    ds.disease_id,
                    d.name,
                    d.description,
                    d.treatment_guidelines,
                    COUNT(*) AS match_count
                FROM disease_symptoms ds
                JOIN diseases d ON ds.disease_id = d.disease_id
                WHERE ds.symptom_id IN ({format_strings})
                GROUP BY ds.disease_id
            """, symptom_ids)

            matches = cursor.fetchall()
            if not matches:
                return []

            disease_ids = [row[0] for row in matches]
            disease_id_str = ','.join(['%s'] * len(disease_ids))

            # B2: L·∫•y t·ªïng s·ªë tri·ªáu ch·ª©ng c·ªßa t·ª´ng b·ªánh
            cursor.execute(f"""
                SELECT disease_id, COUNT(*) as total_symptoms
                FROM disease_symptoms
                WHERE disease_id IN ({disease_id_str})
                GROUP BY disease_id
            """, disease_ids)

            total_symptom_map = {row[0]: row[1] for row in cursor.fetchall()}

            # B3: T√≠nh penalty theo s·ªë l∆∞·ª£ng input t·ª´ ng∆∞·ªùi d√πng
            num_user_symptoms = len(symptom_ids)
            if num_user_symptoms <= 2:
                penalty = 0.75
            elif num_user_symptoms == 3:
                penalty = 0.85
            else:
                penalty = 0.9

            # B4: T√≠nh ƒëi·ªÉm confidence
            predicted = []
            for disease_id, name, desc, guideline, match_count in matches:
                total = total_symptom_map.get(disease_id, match_count)
                raw_score = match_count / total
                confidence = min(round(raw_score * penalty, 2), 0.95)

                predicted.append({
                    "disease_id": disease_id,
                    "name": name,
                    "description": desc or "",
                    "treatment_guidelines": guideline or "",
                    "confidence": confidence
                })

            # S·∫Øp x·∫øp theo ƒë·ªô ph√π h·ª£p
            predicted.sort(key=lambda x: x["confidence"], reverse=True)

            return predicted
    finally:
        conn.close()

# H√†m c≈© d√πng decide_health_action ƒë·ªÉ quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông (c√≥ th·ªÉ s·∫Ω kh√¥ng d√πng n·ªØa Nh·ªØng ch∆∞a b·ªè)
async def gpt_health_talk(user_message: str, stored_symptoms: list[dict], recent_messages: list[str], session_id=None, user_id=None, chat_id=None) -> dict:
    
    # 1. X√°c ƒë·ªãnh c√°c tri·ªáu ch·ª©ng ch∆∞a follow-up v√† tri·ªáu ch·ª©ng li√™n quan (ƒê∆ØA L√äN TR∆Ø·ªöC)
    asked_ids = await get_followed_up_symptom_ids(user_id, session_id)
    remaining = [s["name"] for s in stored_symptoms if s["id"] not in asked_ids]
    symptom_ids = [s["id"] for s in stored_symptoms]
    related_symptoms = get_related_symptoms_by_disease(symptom_ids)
    related_names = [s["name"] for s in related_symptoms][:4] if related_symptoms else []

    # 2. GPT quy·∫øt ƒë·ªãnh h√†nh vi v√† tr√≠ch tri·ªáu ch·ª©ng m·ªõi
    new_symptoms, controller = await decide_health_action(
        user_message,
        [s['name'] for s in stored_symptoms],
        recent_messages,
        remaining_followup_symptoms=remaining,
        related_symptom_names=related_names
    )

    # Tr∆∞·ªõc khi l∆∞u, lo·∫°i b·ªè tri·ªáu ch·ª©ng tr√πng ID
    if new_symptoms:

        # G·ªôp l·∫°i danh s√°ch tri·ªáu ch·ª©ng c≈© v√† m·ªõi
        combined_symptoms = stored_symptoms + new_symptoms

        # Kh·ª≠ tr√πng l·∫∑p theo ID
        seen_ids = set()
        unique_symptoms = []
        for symptom in combined_symptoms:
            if symptom['id'] not in seen_ids:
                unique_symptoms.append(symptom)
                seen_ids.add(symptom['id'])

        # C·∫≠p nh·∫≠t l·∫°i bi·∫øn stored_symptoms
        stored_symptoms = unique_symptoms

        # L∆∞u l·∫°i v√†o session
        stored_symptoms = save_symptoms_to_session(user_id, session_id, stored_symptoms)
        symptoms_saved = await get_symptoms_from_session(user_id, session_id)

        logger.info(f"[üìù] Tri·ªáu ch·ª©ng m·ªõi l∆∞u v√†o session {session_id}: {[s['name'] for s in new_symptoms]}")
        logger.info(f"[üìù] T·ªïng tri·ªáu ch·ª©ng hi·ªán c√≥ (ƒë√£ lo·∫°i tr√πng): {[s['name'] for s in symptoms_saved]}")

    # --- Block 1: Ch·∫©n ƒëo√°n ch√≠nh th·ª©c ---
    if controller.get("trigger_diagnosis"):
        logger.info("‚ö° GPT x√°c ƒë·ªãnh ƒë·ªß ƒëi·ªÅu ki·ªán ch·∫©n ƒëo√°n")
        diseases = predict_disease_based_on_symptoms(stored_symptoms)

        if diseases:
            logger.info(f"‚úÖ GPT ƒë√£ d·ª± ƒëo√°n {len(diseases)} b·ªánh: {[d['name'] for d in diseases]}")
            if user_id:
                note = generate_symptom_note(recent_messages)
                save_symptoms_to_db(user_id, stored_symptoms, note=note)
                save_prediction_to_db(user_id, stored_symptoms, diseases, chat_id)

            diagnosis_text = generate_diagnosis_summary(diseases)
            return {
                "symptoms": new_symptoms,
                "followup_question": None,
                "trigger_diagnosis": True,
                "diagnosis_summary": diagnosis_text,
                "message": diagnosis_text,
                "end": True
            }

    # --- Block 2: K·∫øt lu·∫≠n nh·∫π n·∫øu tri·ªáu ch·ª©ng m∆° h·ªì ho·∫∑c nh·∫π ---
    if controller.get("light_summary"):
        logger.info("üåø GPT x√°c ƒë·ªãnh ch·ªâ c·∫ßn g·ª≠i k·∫øt lu·∫≠n nh·∫π nh√†ng (light_summary)")
        summary = generate_light_diagnosis_message(stored_symptoms)
        if user_id:
            note = generate_symptom_note(recent_messages)
            save_symptoms_to_db(user_id, stored_symptoms, note=note)

        return {
            "symptoms": [],
            "followup_question": None,
            "trigger_diagnosis": False,
            "diagnosis_summary": summary,
            "message": summary,
            "end": True
        }

    # --- Block 3: Ti·∫øp t·ª•c h·ªèi follow-up ---     Block n√†y ƒëang c√≥ v·∫•n ƒë·ªÅ v·ªÅ logic c·∫ßn xem x√©t l·∫°i
    if controller.get("ask_followup", True):
        logger.info("‚ö° GPT x√°c ƒë·ªãnh c√¢u h·ªèi followup")

        followup, targets = await generate_friendly_followup_question(
            stored_symptoms, session_id, recent_messages, return_with_targets=True
        )

        if targets:
            return {
                "symptoms": new_symptoms,
                "followup_question": followup,
                "trigger_diagnosis": False,
                "diagnosis_summary": None,
                "message": followup,
                "end": controller.get("end", False)
            }

    # --- Block 4: N·∫øu GPT y√™u c·∫ßu h·ªèi tri·ªáu ch·ª©ng li√™n quan ---
    if controller.get("ask_related") and related_names:
        logger.info("‚ö° GPT x√°c ƒë·ªãnh h·ªèi chi·ªáu ch·ª©ng li√™n quan")
        followup_related = await generate_related_symptom_question(related_names)
        return {
            "symptoms": [],
            "followup_question": followup_related,
            "trigger_diagnosis": False,
            "diagnosis_summary": None,
            "message": followup_related,
            "end": False
        }

    # --- Block 5: Fallback ho·∫∑c tr·∫£ l·ªùi d√≠ d·ªèm ---
    if controller.get("playful_reply"):
        logger.info("üò¥ GPT ch·ªçn ph·∫£n h·ªìi d√≠ d·ªèm ho·∫∑c nh·∫π nh√†ng ƒë·ªÉ k·∫øt th√∫c lu·ªìng.")
        return {
            "symptoms": [],
            "followup_question": None,
            "trigger_diagnosis": False,
            "diagnosis_summary": None,
            "message": controller["message"],
            "end": True
        }

    # --- Block 6: Fallback cu·ªëi n·∫øu kh√¥ng r√µ h∆∞·ªõng ƒëi ---
    return {
        "symptoms": new_symptoms,
        "followup_question": None,
        "trigger_diagnosis": False,
        "diagnosis_summary": None,
        "message": controller.get("message", "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m ƒë·ªÉ m√¨nh hi·ªÉu r√µ h∆°n nh√©?"),
        "end": controller.get("end", False)
    }

# H√†m c≈© quy·∫øt ƒë·ªãnh chatbot s·∫Ω l√†m g√¨ (c√≥ th·ªÉ s·∫Ω kh√¥ng d√πng n·ªØa Nh·ªØng ch∆∞a b·ªè)
async def decide_health_action(
    user_message,
    symptom_names: list[str],
    recent_messages: list[str],
    remaining_followup_symptoms: list[str] = None,
    related_symptom_names: list[str] = None
) -> tuple[list[dict], dict]:
    
    symptom_list = get_symptom_list()

    prompt = build_diagnosis_controller_prompt(
        symptom_list,
        user_message,
        symptom_names,
        recent_messages,
        remaining_followup_symptoms=remaining_followup_symptoms,
        related_symptom_names=related_symptom_names
    )

    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.3, max_tokens=500)

        content = response.choices[0].message.content.strip()

        if content.startswith("```json"):
            content = content.replace("```json", "").replace("```", "").strip()

        parsed = json.loads(content)

        # Parse tri·ªáu ch·ª©ng m·ªõi
        extracted_names = parsed.get("symptom_extract", [])
        name_map = {normalize_text(s["name"]): s for s in symptom_list}
        matched = []
        seen_ids = set()

        for name in extracted_names:
            norm = normalize_text(name)
            s = name_map.get(norm)
            if s and s["id"] not in seen_ids:
                matched.append({"id": s["id"], "name": s["name"]})
                seen_ids.add(s["id"])

        # Parse controller nh∆∞ c≈©
        controller = {
            "trigger_diagnosis": parsed.get("trigger_diagnosis", False),
            "ask_followup": parsed.get("ask_followup", True),
            "ask_related": parsed.get("ask_related", False),
            "light_summary": parsed.get("light_summary", False),
            "playful_reply": parsed.get("playful_reply", False),
            "diagnosis_text": parsed.get("diagnosis_text"),
            "message": parsed.get("message"),
            "end": (
                parsed.get("trigger_diagnosis", False)
                or parsed.get("light_summary", False)
                or parsed.get("playful_reply", False)
            )
        }

        return matched, controller

    except Exception as e:
        logger.error(f"[‚ùå] L·ªói h·ªá th·ªëng trong decide_health_action: {e}")
        return [], {
            "trigger_diagnosis": False,
            "ask_followup": True,
            "ask_related": False,
            "light_summary": False,
            "playful_reply": False,
            "diagnosis_text": None,
            "message": "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m ƒë·ªÉ m√¨nh hi·ªÉu r√µ h∆°n nh√©?",
            "end": False
        }

# T·∫°o ƒëo·∫°n vƒÉn t∆∞ v·∫•n t·ª´ danh s√°ch b·ªánh, bao g·ªìm m√¥ t·∫£ ng·∫Øn v√† g·ª£i √Ω chƒÉm s√≥c (c√≥ th·ªÉ s·∫Ω kh√¥ng d√πng or t√°i s·ª≠ d·ª•ng cho ch·ª©c nƒÉng kh√°c)
def generate_diagnosis_summary(diseases: list[dict]) -> str:
    if not diseases:
        return "M√¨nh ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë∆∞a ra ch·∫©n ƒëo√°n. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m tri·ªáu ch·ª©ng nh√©."

    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho GPT
    disease_lines = []
    for d in diseases[:3]:  # ch·ªâ l·∫•y top 3
        name = d.get("name", "Kh√¥ng x√°c ƒë·ªãnh")
        conf = int(d.get("confidence", 0.0) * 100)
        desc = (d.get("description") or "").strip()[:120]
        care = (d.get("treatment_guidelines") or "").strip()[:100]
        disease_lines.append(f"- {name} (~{conf}%): {desc} | G·ª£i √Ω: {care}")

        prompt = f"""
            You are a warm, empathetic, and natural-sounding virtual health assistant.

            Based on the following possible conditions identified by AI:

            {chr(10).join(disease_lines)}

            Please write a natural, friendly health summary **in Vietnamese**, following this structure and rules:

            1. Begin gently: e.g., ‚ÄúD·ª±a tr√™n nh·ªØng g√¨ b·∫°n chia s·∫ª...‚Äù

            2. Then clearly list 2‚Äì3 possible conditions related to the user's symptoms.
            - Each condition must be introduced with üìå followed by the disease name in UPPERCASE
            - You MAY use simple Markdown (like **bold**) to highlight the disease name ONLY

            3. Next, suggest 1‚Äì2 lighter possible explanations (like posture, tiredness, stress). For example:
            ‚ÄúC≈©ng c√≥ th·ªÉ ch·ªâ l√† do b·∫°n thay ƒë·ªïi t∆∞ th·∫ø ƒë·ªôt ng·ªôt ho·∫∑c ƒëang m·ªát m·ªèi nh·∫π üåø‚Äù

            4. Then provide friendly self-care suggestions, such as:
            - üßò Ngh·ªâ ng∆°i v√† th∆∞ gi√£n
            - üåä U·ªëng ƒë·ªß n∆∞·ªõc
            - üí¨ Theo d√µi c∆° th·ªÉ trong 1‚Äì2 ng√†y t·ªõi

            5. After self-care suggestions, add a gentle reassurance like:
            ‚ÄúNh∆∞ng b·∫°n c≈©ng ƒë·ª´ng qu√° lo v√¨ ƒë√¢y ch·ªâ l√† nh·ªØng tri·ªáu ch·ª©ng ƒë∆∞·ª£c ph·ªèng ƒëo√°n t·ª´ t√¨nh tr·∫°ng b·∫°n chia s·∫ª.‚Äù

            6. End with a final caring encouragement, like:
            ‚ÄúN·∫øu tri·ªáu ch·ª©ng v·∫´n k√©o d√†i, b·∫°n n√™n ƒë·∫øn g·∫∑p b√°c sƒ© ƒë·ªÉ ki·ªÉm tra k·ªπ h∆°n nh√©.‚Äù

            Tone and formatting rules:
            - Use warm, calm, non-alarming language
            - Avoid medical jargon, complex terms, or test/procedure names (like EEG, MRI, etc.)
            - You MAY use up to 2‚Äì3 relevant emojis total (no more)
            - Use simple line breaks only ‚Äî no extra spacing between lines
            - Do NOT use bullet-point lists or tables
            - Your response must be in Vietnamese only
        """


    try:
        response = chat_completion([{"role": "user", "content": prompt}], temperature=0.6, max_tokens=350)
        return response.choices[0].message.content.strip()
    except Exception:
        return "D·ª±a tr√™n nh·ªØng g√¨ b·∫°n chia s·∫ª, c√≥ th·ªÉ li√™n quan m·ªôt v√†i t√¨nh tr·∫°ng nh·∫π. B·∫°n n√™n ngh·ªâ ng∆°i v√† theo d√µi th√™m nh√©. N·∫øu kh√¥ng ƒë·ª°, h√£y ƒë·∫øn b√°c sƒ© ƒë·ªÉ ki·ªÉm tra k·ªπ h∆°n."

# T·∫°o c√¢u tr·∫£ l·ªùi m·ªÅm m·∫°i khi bot nghƒ© ƒë·∫≠y kh√¥ng th·∫≠t s·ª± l√† b·ªánh (c√≥ th·ªÉ s·∫Ω kh√¥ng d√πng or t√°i s·ª≠ d·ª•ng cho ch·ª©c nƒÉng kh√°c)
def generate_light_diagnosis_message(symptoms: list[dict]) -> str:
    names = [s['name'] for s in symptoms]
    symptom_text = ", ".join(names) if names else "m·ªôt v√†i tri·ªáu ch·ª©ng"

    prompt = f"""
        You are a kind and empathetic virtual health assistant.

        The user has shared some symptoms (e.g., {symptom_text}), but their responses to follow-up questions have been vague, uncertain, or negative.

        Your job is to write a short and natural **message in Vietnamese**, gently acknowledging the situation and offering simple care advice.

        Instructions:
        - Do NOT list specific diseases or try to diagnose.
        - Assume the situation is still unclear or mild.
        - Use a natural, conversational tone ‚Äî avoid sounding like a formal announcement.
        - You may start directly with something soft and empathetic, without saying ‚ÄúCh√†o b·∫°n‚Äù or ‚ÄúC·∫£m ∆°n b·∫°n‚Äù.
        - You can use friendly emojis (like üòå, üåø, üí¨) if it makes the message feel more human and reassuring ‚Äî but no more than 2.
        - Suggest light care actions (e.g., ngh·ªâ ng∆°i, u·ªëng n∆∞·ªõc ·∫•m) and remind the user to watch for any changes.
        - Recommend seeing a doctor if symptoms persist or get worse.
        - Do NOT repeat the full list of symptoms; refer to them generally (e.g., "v√†i tri·ªáu ch·ª©ng b·∫°n ƒë√£ n√≥i").
        - End with a soft and comforting sentence like ‚ÄúB·∫°n c·ª© y√™n t√¢m theo d√µi th√™m nha.‚Äù or similar.
        - Do NOT use Markdown, JSON, or medical jargon.

        Output: Your entire message must be in Vietnamese only.
        """.strip()

    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.4, max_tokens=150)

        return response.choices[0].message.content.strip()
    except Exception:
        return "C√≥ th·ªÉ ƒë√¢y ch·ªâ l√† t√¨nh tr·∫°ng nh·∫π th√¥i, b·∫°n c·ª© ngh·ªâ ng∆°i v√† theo d√µi th√™m nh√©. N·∫øu kh√¥ng ƒë·ª° th√¨ n√™n ƒëi kh√°m cho y√™n t√¢m nha."









# T·∫°o c√¢u h·ªèi ti·∫øp theo nh·∫π nh√†ng, th√¢n thi·ªán, g·ª£i √Ω ng∆∞·ªùi d√πng chia s·∫ª th√™m th√¥ng tin d·ª±a tr√™n c√°c tri·ªáu ch·ª©ng ƒë√£ ghi nh·∫≠n.(B·ªè?)
def join_symptom_names_vietnamese(names: list[str]) -> str:
    if not names:
        return ""
    if len(names) == 1:
        return names[0]
    if len(names) == 2:
        return f"{names[0]} v√† {names[1]}"
    return f"{', '.join(names[:-1])} v√† {names[-1]}"

FOLLOWUP_KEY = "followup_asked"

# ‚úÖ generate_friendly_followup_question tr·∫£ v·ªÅ c·∫£ c√¢u h·ªèi + danh s√°ch tri·ªáu ch·ª©ng ch∆∞a h·ªèi follow-up
async def generate_friendly_followup_question(
    symptoms: list[dict], 
    session_id: str = None, 
    recent_messages: list[str] = [],
    return_with_targets: bool = False
) -> str | tuple[str, list[dict]]:
    if not symptoms:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m n·∫øu c√≤n tri·ªáu ch·ª©ng n√†o kh√°c b·∫°n ƒëang g·∫∑p ph·∫£i nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

    # üìå B1: Load c√°c tri·ªáu ch·ª©ng ƒë√£ h·ªèi follow-up t·ª´ session
    already_asked = set()
    if session_id:
        already_asked = set(await get_followed_up_symptom_ids(session_id))

    # üìå B2: L·ªçc tri·ªáu ch·ª©ng ch∆∞a h·ªèi
    symptoms_to_ask = [s for s in symptoms if s['id'] not in already_asked]
    if not symptoms_to_ask:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m n·∫øu c√≤n tri·ªáu ch·ª©ng n√†o kh√°c b·∫°n ƒëang g·∫∑p ph·∫£i nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

    # üìå B3: Truy DB l·∫•y follow-up question
    symptom_ids_to_ask = [s['id'] for s in symptoms_to_ask]
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            format_strings = ','.join(['%s'] * len(symptom_ids_to_ask))
            cursor.execute(f"""
                SELECT name, followup_question, symptom_id
                FROM symptoms
                WHERE symptom_id IN ({format_strings})
            """, symptom_ids_to_ask)
            results = cursor.fetchall()
    finally:
        conn.close()

    names, questions, just_asked_ids = [], [], []
    for name, question, sid in results:
        if question:
            names.append(name)
            questions.append(question.strip())
            just_asked_ids.append(sid)

    if not questions:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m n·∫øu c√≤n tri·ªáu ch·ª©ng n√†o kh√°c b·∫°n ƒëang g·∫∑p ph·∫£i nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

    context = "\n".join(f"- {msg}" for msg in recent_messages[-3:]) if recent_messages else "(no prior messages)"

    gpt_prompt = f"""
        You are a warm and understanding assistant helping a user who may not feel well. Below is the recent conversation with the user:
        {context}

        The user has shared the following symptoms: {', '.join(names)}.

        Here are the follow-up questions you would normally ask:
        {chr(10).join([f"- {n}: {q}" for n, q in zip(names, questions)])}

        Now write a **single, natural, caring message in Vietnamese** to gently follow up with the user.

        Instructions:
        - Combine all follow-up questions into one fluent Vietnamese message.
        - Start the message naturally. You may:
        - Jump straight into the follow-up question, or
        - Use a light, symptom-specific transition such as:
            - ‚Äú√Ä, [tri·ªáu ch·ª©ng] ha‚Ä¶‚Äù
            - ‚ÄúV·ªÅ chuy·ªán [tri·ªáu ch·ª©ng]‚Ä¶‚Äù
            - "Um‚Ä¶‚Äù
            - Or a soft emoji like ü´Å (for breathing), üí≠ (thinking), üåÄ (dizzy), üòµ‚Äçüí´ (lightheaded)
        - Make sure the symptom name in the transition matches what the user reported (e.g., use ‚Äúch√≥ng m·∫∑t‚Äù if they mentioned dizziness).
        - Do not insert the word ‚Äúho‚Äù unless the user‚Äôs symptom is cough.
        - Use varied connectors such as ‚ÄúB√™n c·∫°nh ƒë√≥‚Äù, ‚ÄúM·ªôt ƒëi·ªÅu n·ªØa‚Äù, ‚ÄúTh√™m v√†o ƒë√≥‚Äù ‚Äî each only once.
        - Avoid repeating sentence structure ‚Äî write naturally.
        - Do NOT ask about other or related symptoms.
        - Do NOT greet or thank ‚Äî just continue the conversation.
        - If the user already gave context (e.g. time, severity), don‚Äôt repeat that ‚Äî go deeper if needed.
        - Refer to yourself as ‚Äúm√¨nh‚Äù ‚Äî not ‚Äút√¥i‚Äù.
        - Keep the tone warm, friendly, and caring like a thoughtful assistant ‚Äî not a formal doctor.

        Your response must be in Vietnamese only.
        """.strip()




    try:
        response = chat_completion([
            {"role": "user", "content": gpt_prompt}
        ], temperature=0.4, max_tokens=200)

        reply = response.choices[0].message.content.strip()
        if session_id and just_asked_ids and reply:
            await mark_followup_asked(session_id,  just_asked_ids)

        return (reply, symptoms_to_ask) if return_with_targets else reply

    except Exception:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m ƒë·ªÉ m√¨nh h·ªó tr·ª£ t·ªët h∆°n nh√©?"
        return (default_reply, []) if return_with_targets else default_reply











# Ki·ªÉm tra xem c√¢u ti·∫øp theo c√≥ b·ªï sung cho tri√™u ch·ª©ng ko (B·ªé)
def gpt_looks_like_symptom_followup_uncertain(text: str) -> bool:
    prompt = f""" 
        You are an AI assistant that determines whether the following message from a user in a health-related conversation sounds like a vague or uncertain follow-up to previous symptom discussion.

        Message: "{text}"

        These replies may contain vague expressions, indirect timing, unclear feelings, or conversational hesitation ‚Äî often seen in real user input. 

        Examples of vague/uncertain replies:
        - "kh√¥ng ch·∫Øc", "c√≥ th·ªÉ", "t√¥i kh√¥ng bi·∫øt", "v·∫´n ch∆∞a r√µ", "can't tell", "m·ªôt ch√∫t", "kind of", "ch·∫Øc l√† v·∫≠y", "kh√¥ng r√µ l·∫Øm", "th·ªânh tho·∫£ng", "ƒë√¥i khi b·ªã", "h∆°i h∆°i", "c≈©ng kh√¥ng bi·∫øt n·ªØa", "kh√≥ n√≥i l·∫Øm"
        - "v·ª´a ng·ªß d·∫≠y", "s√°ng nay", "l√∫c ƒë√≥", "sau khi ƒÉn", "xong th√¨ th·∫•y m·ªát", "ƒëang n·∫±m th√¨ b·ªã", "ƒëi ngo√†i xong b·ªã", "v·ª´a ƒë·ª©ng l√™n", "l√∫c ƒë·ª©ng d·∫≠y", "trong l√∫c ·∫•y", "sau khi u·ªëng n∆∞·ªõc", "khi ƒëang t·∫≠p", "v·ª´a m·ªõi...", "xong r·ªìi th√¨..."
        - "th·∫•y ng∆∞·ªùi l·∫° l·∫°", "kh√≥ t·∫£ l·∫Øm", "kh√¥ng gi·ªëng m·ªçi khi", "c·∫£m th·∫•y h∆°i l·∫°", "c·∫£m gi√°c kh√¥ng quen", "m·ªát ki·ªÉu kh√°c", "ƒë·∫ßu √≥c kh√¥ng t·ªânh t√°o l·∫Øm", "c·∫£m th·∫•y h∆°i kh√≥ ch·ªãu", "ƒëang n·∫±m th√¨ th·∫•y..."

        Is this message an uncertain continuation of a prior symptom conversation ‚Äî meaning the user might still be talking about symptoms but isn't describing clearly?

        Answer only YES or NO.
    """ 

    response = chat_completion([
        {"role": "user", "content": prompt}
    ], temperature=0.0, max_tokens=5)

    answer = response.choices[0].message.content.strip().lower()
    return "yes" in answer

# Ki·ªÉm tra xem c√¢u ti·∫øp theo c√≥ b·ªï sung cho tri√™u ch·ª©ng ko (B·ªé)
def looks_like_followup_with_gpt(text: str, context: str = "") -> bool:
    prompt = f""" 
        You are an AI assistant that helps identify intent in health care conversations.

        Here is the previous context:
        "{context}"

        The user has now said:
        "{text}"

        Is this a continuation of the prior health-related context ‚Äî such as adding more symptoms, describing progression, or providing clarification?

        Answer only YES or NO.
    """ 

    response = chat_completion([
        {"role": "system", "content": "B·∫°n l√† AI ph√¢n t√≠ch h·ªôi tho·∫°i."},
        {"role": "user", "content": prompt}
    ], temperature=0.0, max_tokens=5)

    answer = response.choices[0].message.content.strip().lower()
    return "yes" in answer